package models

import (
	"context"
	"go.mongodb.org/mongo-driver/bson"
)

type AirQualityObserved struct {
	Id              string  `json:"id" bson:"id"`
	Type            string  `json:"type" bson:"type"`
	Date            string  `json:"date" bson:"date"`
	AirQualityLevel string  `json:"airqualitylevel" bson:"airqualitylevel"`
	AirQualityIndex float64 `json:"airqualityindex" bson:"airqualityindex"`
}

const AIRQUALITYOBSERVED_COL = "airqualityobserveds"

func (a *AirQualityObserved) Insert() error {
	a.Id = primitive.NewObjectID()
	res, err := getDatabase().Collection(AIRQUALITYOBSERVED_COL).InsertOne(context.Background(), a)
	a.Id = res.InsertedID.(primitive.ObjectID)
	return err
}

func (a *AirQualityObserved) Delete() error {
	_, err := getDatabase().Collection(AIRQUALITYOBSERVED_COL).DeleteOne(context.Background(), bson.D{{"_id", a.Id}})
	return err
}

func (a *AirQualityObserved) Update() error {
	update := bson.M{"$set": bson.M{
		"id":              a.Id,
		"type":            a.Type,
		"date":            a.Date,
		"airqualitylevel": a.AirQualityLevel,
		"airqualityindex": a.AirQualityIndex,
	}}
	_, err := getDatabase().Collection(AIRQUALITYOBSERVED_COL).UpdateOne(context.Background(), bson.D{{"_id", a.Id}}, update)
	return err
}

func FindAirQualityObserved(id primitive.ObjectID) (a AirQualityObserved, err error) {
	filter := bson.D{{"_id", id}}
	err = getDatabase().Collection(AIRQUALITYOBSERVED_COL).FindOne(context.Background(), filter).Decode(&a)
	return
}

func AllAirQualityObserveds() (airqualityobserveds []AirQualityObserved, err error) {
	cursor, err := getDatabase().Collection(AIRQUALITYOBSERVED_COL).Find(context.Background(), bson.D{{}})
	if err != nil {
		return
	}
	var a AirQualityObserved
	for cursor.Next(context.TODO()) {
		err = cursor.Decode(&a)
		if err != nil {
			return
		}
		airqualityobserveds = append(airqualityobserveds, a)
	}
	if err = cursor.Err(); err != nil {
		return
	}
	cursor.Close(context.TODO())
	return
}
