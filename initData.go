package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"math/rand"
	"net/http"
	"time"
)

// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

type Data struct {
	DateObserved    time.Time `json:"dateObserved"`
	Temperature     int       `json:"temperature"`
	CO              int       `json:"co"`
	H2S             int       `json:"h2s"`
	Humidity        int       `json:"humidity"`
	NO2             int       `json:"no2"`
	O3              int       `json:"o3"`
	Pressure        int       `json:"pressure"`
	SO2             int       `json:"so2"`
	Uv              int       `json:"uv"`
	Uva             int       `json:"uva"`
	Uvb             int       `json:"uvb"`
	WindDirection   int       `json:"windDirection"`
	WindSpeed       int       `json:"windSpeed"`
	AirQualityIndex int       `json:"airQualityIndex"`
	ID              string    `json:"id,omitempty"`
	Type            string    `json:"type,omitempty"`
}

type Payload struct {
	Data           []Data `json:"data"`
	SubscriptionID string `json:"subscriptionId"`
}

func main() {
	t := time.Now()
	start := time.Date(t.Year(), t.Month(), t.Day(),
		t.Hour(), t.Minute(), t.Second(), t.Nanosecond(), time.UTC)

	for i := 0; i < 10; i++ {
		// "2019-08-16T22:12:22Z"

		fmt.Println(start.Format("2006-01-02T15:04:05Z"))
		data := randomData()
		data.DateObserved = start
		postToOrion(data)

		// Subscription sim
		data.ID = "urn:ngsi-ld:DataObserved:MOD1"
		data.Type = "DataObserved"
		payload := Payload{Data: []Data{data}, SubscriptionID: "sub123123123123"}
		postToServer(payload)

		start = start.Add(time.Minute * 10)
		time.Sleep(2 * time.Second)
	}
}

func randomData() Data {
	rand.Seed(time.Now().UTC().UnixNano())
	return Data{
		Temperature:     rand.Intn(20) + 5,
		CO:              rand.Intn(2) + 5,
		H2S:             rand.Intn(4) + 5,
		Humidity:        rand.Intn(70) + 5,
		NO2:             rand.Intn(100) + 5,
		O3:              rand.Intn(12) + 5,
		Pressure:        rand.Intn(800) + 5,
		SO2:             rand.Intn(50) + 5,
		Uv:              rand.Intn(1) + 5,
		Uva:             rand.Intn(1) + 5,
		Uvb:             rand.Intn(1) + 5,
		WindDirection:   rand.Intn(60) + 5,
		WindSpeed:       rand.Intn(5) + 52,
		AirQualityIndex: rand.Intn(100) + 20,
	}
}

func postToOrion(data Data) {
	payloadBytes, err := json.Marshal(data)
	if err != nil {
		// handle err
	}

	body := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("PATCH",
		"http://localhost:1026/v2/entities/urn:ngsi-ld:DataObserved:MOD1/attrs?options=keyValues", body)
	if err != nil {
		log.Println(err)
	}
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)

	bodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Println(err)
	}
	bodyString := string(bodyBytes)
	log.Println(bodyString)
	if err != nil {
		// handle err
		log.Println(err)

	}
	defer resp.Body.Close()
}

func postToServer(data Payload) {
	payloadBytes, err := json.Marshal(data)
	if err != nil {
		// handle err
	}
	body := bytes.NewReader(payloadBytes)
	req, err := http.NewRequest("POST", "http://localhost:9000/data", body)
	if err != nil {
		log.Println(err)
	}
	req.Header.Set("Content-Type", "application/json; charset=utf-8")
	req.Header.Set("Accept", "application/json")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Println(err)
	}
	defer resp.Body.Close()
}
